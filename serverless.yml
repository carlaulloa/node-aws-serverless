# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: personalccu
# "service" is the name of this project. This will also be added to your AWS resource names.
app: appointment-lambda

service: appointment-lambda

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, "dev"}
  iam:
    role:
      statements:
        - Action: SNS:Publish
          Effect: Allow
          Resource: !Ref SnsAppointment
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource: '*'

build:
  esbuild:
    bundle: true
    minify: false 
    exclude:
      - "@aws-sdk/*"

functions:
  AppointmentFromMobile:
    handler: src/handlers/appointment-from-mobile/index.register
    environment:
      EVENT_BUS_NAME: !Ref EventBridgeBus
    events:
      - http:
          path: /appointment-mobile
          method: post

  Appointment:
    handler: src/handlers/appointment/index.register
    events:
      - http:
          path: /appointment
          method: post
      - sqs:
          arn: 
            Fn::GetAtt:
              - EventBridgeSQS
              - Arn
    environment:
      SNS_APPOINTMENT: !Ref SnsAppointment
  AppointmentCO:
    handler: src/handlers/appointment-co/index.register
    events:
      - sqs:
  #        batchSize: 5
  #        maximumBatchingWindow: 30
          arn: 
            Fn::GetAtt:
              - SQSCO
              - Arn
  AppointmentPE:
    handler: src/handlers/appointment-pe/index.register
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - SQSPE
              - Arn
  AppointmentMX:
    handler: src/handlers/appointment-mx/index.register
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - SQSMX
              - Arn

  HelpDesk:
    handler: src/handlers/help-desk/index.register
    events:
      - sqs:
          arn: 
            Fn::GetAtt:
              - SQSDlq
              - Arn

resources:
  Resources:
    SQSPE:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQSPE
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "SQSDlq"
              - "Arn"
          maxReceiveCount: 1

    SQSCO:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQSCO
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "SQSDlq"
              - "Arn"
          maxReceiveCount: 1

    SQSMX:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQSMX
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "SQSDlq"
              - "Arn"
          maxReceiveCount: 1

    SQSDlq:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-SQSDlq
        VisibilityTimeout: 10

    SnsAppointment:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "Topic to redirect"
        TopicName: ${self:service}-${self:provider.stage}-SnsAppointment

    SubscriptionSqsPE:
      Type: AWS::SNS::Subscription
      Properties:
          Protocol: sqs
          Endpoint: 
            Fn::GetAtt:
              - SQSPE
              - Arn
          TopicArn:
            Ref: SnsAppointment
          RawMessageDelivery: true
          FilterPolicyScope: MessageBody
          FilterPolicy:
            countryISO:
              - PE
    SubscriptionSqsCO:
      Type: AWS::SNS::Subscription
      Properties:
          Protocol: sqs
          Endpoint: 
            Fn::GetAtt:
              - SQSCO
              - Arn
          TopicArn:
            Ref: SnsAppointment
          RawMessageDelivery: true
          FilterPolicyScope: MessageBody
          FilterPolicy:
            countryISO:
              - CO
    SubscriptionSqsMX:
      Type: AWS::SNS::Subscription
      Properties:
          Protocol: sqs
          Endpoint: 
            Fn::GetAtt:
              - SQSMX
              - Arn
          TopicArn:
            Ref: SnsAppointment
          RawMessageDelivery: true
          FilterPolicyScope: MessageBody
          FilterPolicy:
            countryISO:
              - MX

    PolicySqsPE:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sqs:sendmessage
              Resource: !GetAtt SQSPE.Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsAppointment
        Queues:
          - !Ref SQSPE

    PolicySqsCO:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sqs:sendmessage
              Resource: !GetAtt SQSCO.Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsAppointment
        Queues:
          - !Ref SQSCO

    PolicySqsMX:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sqs:sendmessage
              Resource: !GetAtt SQSMX.Arn
              Principal: "*"
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref SnsAppointment
        Queues:
          - !Ref SQSMX

    EventBridgeSQS:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "EventBridgeSQS"

    EventBridgeBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: "EventBridgeBus"

    MyEventRule:
      Type: 'AWS::Events::Rule'
      Properties:
        EventBusName: EventBridgeBus
        State: ENABLED
        EventPattern:
          source:
            - appointment_mobile
          detail-type:
            - event_create_appointment
        Targets:
          - Arn: 
              Fn::GetAtt: 
                - EventBridgeSQS
                - Arn
            Id: 'SQSClient'

    EventBridgePermission:
      Type: 'AWS::SQS::QueuePolicy'
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action: "sqs:SendMessage"
              Principal:
                Service: events.amazonaws.com
              Resource:
                Fn::GetAtt:
                  - EventBridgeSQS
                  - Arn
              Condition:
                ArnEquals:
                  "aws:SourceArn":
                    Fn::GetAtt:
                      - MyEventRule
                      - Arn
        Queues:
          - !Ref EventBridgeSQS
   